# -*- coding: utf-8 -*-
"""NIAS Assignment Wahid Dino Samo

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LIAjX4Ku18aRb1Rk9LzRWSPIgCTVEv_f

#**NIAIS ASSIGNMENT**
##Submitted By Wahid Dino Samo

##**Step 1: Data Collection**
We need to collect data about student grades and their GPAs. This data can be obtained from
the university's student record system or by asking students to provide their grades and GPAs.
We will use this data to train our Linear Regression model.

Solution:
 Dataset for the assignment is taken from kaggle reference: https://www.kaggle.com/datasets/sankha1998/student-semester-result

Downloaded and stored the dataset to my github repository
https://github.com/wahiddinosamo08/NIAiSAssignment

###Step 1.1: Downloading the Data
"""

dataset_url = 'https://raw.githubusercontent.com/wahiddinosamo08/NIAiSAssignment/main/data.csv'

from urllib.request import urlretrieve

urlretrieve(dataset_url,'data.csv')

"""###Step 1.2: Checking the Downloaded Data using pandas"""

import pandas as pd

cgpa_df =pd.read_csv('data.csv')

cgpa_df

"""By Analyzing the Data we know that the dataset contains 177 rows and 9 columns. Each Row contains GPA of each student for consecutive 5 semesters. there is some data cleaning required that will be done sooner.

Our Objective is to predict the GPAs of Students by using linear regression model. for reference we will use semesters 1 to 4 data to predict values in 5th semester.

## **Step 2: Data Preprocessing**
Once we have collected the data, we need to preprocess it before training our model. This involves cleaning the data, removing any missing values, and converting categorical variables into numerical values.
"""

cgpa_df.info()

cgpa_df.describe()

cgpa_df.describe().T

cgpa_df.Gender

"""We can see that here  are some values that are Female and Some are Male and others are F and M. So in it we have to make similar values like F for female and M for Male.


"""

cgpa_df['Gender'].replace({'Female':'F','Male':'M'},inplace=True)

cgpa_df.Gender

cgpa_df

"""### Removing Missing Values from the Dataset"""

cgpa_df.isnull().sum()

cgpa_df['Gender'].fillna(0,inplace=True)                 # Replacing Null values from 0

cgpa_df['1st'].fillna(cgpa_df['1st'].mean(),inplace = True)        # Replacing Null values from 0
cgpa_df['2nd'].fillna(cgpa_df['2nd'].mean(),inplace=True)        # Replacing Null values from 0
cgpa_df['3rd'].fillna(cgpa_df['3rd'].mean(),inplace=True)        # Replacing Null values from 0
cgpa_df['4th'].fillna(cgpa_df['4th'].mean(),inplace=True)        # Replacing Null values from 0
cgpa_df['5th'].fillna(cgpa_df['5th'].mean(),inplace=True)        # Replacing Null values from 0

cgpa_df.isnull().sum()

"""### Lets Combine the College Code, Subject Code, and Roll No Code into a Single Column."""

cgpa_df['College Code']=cgpa_df['College Code'].astype(str)
cgpa_df['Subject Code']=cgpa_df['Subject Code'].astype(str)
cgpa_df['Roll']=cgpa_df['Roll'].astype(str)
cgpa_df['studentid']=cgpa_df['College Code']+cgpa_df['Subject Code']+cgpa_df['Roll']
cgpa_df['studentid']

cgpa_df.drop(columns=['Subject Code','Roll'],inplace=True)

cgpa_df.info()

"""Now there are No Null Values in the Dataset. We can proceed further.

### Introduce Average Column
In this step we will introduce a column Average which will be the average gpa of the student. We do this to releate 1st,2nd,3rd,4th,5th Semester CGPAs. Otherwise we wont be able to make a correleation
"""

cgpa_df['Avg']=(cgpa_df['1st']+cgpa_df['2nd']+cgpa_df['3rd']+cgpa_df['4th']+cgpa_df['5th'])/5

cgpa_df

"""### Exploratory Analysis and Visualization
In order to determine the independent and dependent varriables to establish the releationships between 'Averages' and other columns.

i will use matplotlib, seaborn and plotly for visulization
"""

!pip install plotly matplotlib seaborn --quiet

# Commented out IPython magic to ensure Python compatibility.
import plotly.express as px
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

sns.set_style('darkgrid')
matplotlib.rcParams['font.size'] = 14
matplotlib.rcParams['figure.figsize'] = (10, 6)
matplotlib.rcParams['figure.facecolor'] = '#00000000'

"""#### 1st Semester GPA"""

cgpa_df['1st'].describe()

fig = px.histogram(cgpa_df,
                   x='1st',
                   marginal='box',
                   nbins=47,
                   title='Distribution of 1st Semester CGPA')
fig.update_layout(bargap=0.1)
fig.show()

"""We can say that majority of the students have an GPA of 7 in the first semester and only a few students at the tails. the Graph indicates that we have a noraml distrubution in 1st semester GPA.

#### 2nd Semester GPA
"""

cgpa_df['2nd'].describe()

fig = px.histogram(cgpa_df,
                   x='2nd',
                   marginal='box',
                   nbins=47,
                   title='Distribution of 2nd Semester CGPA')
fig.update_layout(bargap=0.1)
fig.show()

"""We can see that the students have improved their GPAs, got more than 6 gpa on average in the 2nd Semesters and only 2 students have cgpa less than 5.

#### 3rd Semester GPA
"""

cgpa_df['3rd'].describe()

fig = px.histogram(cgpa_df,
                   x='3rd',
                   marginal='box',
                   nbins=47,
                   title='Distribution of 3rd Semester CGPA')
fig.update_layout(bargap=0.1)
fig.show()

"""It is found that that students have reduced their gpa in 3rd semester. The Average remains above 6.

#### 4th Semester GPA
"""

cgpa_df['4th'].describe()

fig = px.histogram(cgpa_df,
                   x='4th',
                   marginal='box',
                   nbins=47,
                   title='Distribution of 4th Semester CGPA')
fig.update_layout(bargap=0.1)
fig.show()

"""The 4th Semester Distribution follows a Guassian Distribution where average of the class has improved.

#### 5th Semester GPA
"""

cgpa_df['5th'].describe()

fig = px.histogram(cgpa_df,
                   x='5th',
                   marginal='box',
                   nbins=47,
                   title='Distribution of 5th Semester CGPA')
fig.update_layout(bargap=0.1)
fig.show()

"""The 5th Semester seems good as students have improved their scores. more students have gained gpa more than 7.

#### Average
"""

cgpa_df['Avg'].describe()

fig = px.histogram(cgpa_df,
                   x='Avg',
                   marginal='box',
                   color = 'Gender',
                   color_discrete_sequence =['red','blue','green'],
                   nbins=47,
                   title='Distribution of Average of the Students')
fig.update_layout(bargap=0.1)
fig.show()

"""We can see that the Gender does not have a significant effect on the averages so we will not consider the Gender into our data.

### **Correleation**
"""

Gender_values = {'F':0,'M':1}
Gender_numeric =cgpa_df.Gender.map(Gender_values)
cgpa_df.Avg.corr(Gender_numeric)

studentidnum = cgpa_df.studentid.map(int)
cgpa_df.Avg.corr(studentidnum)

sns.pairplot(cgpa_df)

"""## **Step 3: Splitting Data**
We will split the data into training and testing sets. We will use the training set to train our Linear Regression model and the testing set to evaluate its performance.

#### Selecting the Colummns with Correlation only
"""

rcgpa_df = cgpa_df[['1st','2nd', '3rd', '4th','5th']]

rcgpa_df

"""#### Split Data into train and test"""

from sklearn.model_selection import train_test_split

X = rcgpa_df[['1st','2nd','3rd','4th']]
y = cgpa_df['5th']

X_train, X_test, y_train, y_test = train_test_split(X , y, test_size = 1/3 , random_state=21)

"""## Step 4: Training the Model
We will use the Linear Regression algorithm from scikit-learn library to train our model. We
will fit the model to the training data and use it to predict GPAs for the testing data
"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

gpa_model = LinearRegression()
gpa_model.fit(X_train,y_train.values)

"""## Step 5: Evaluating the Model
We will evaluate the performance of our model by comparing its predicted GPAs to the actual
GPAs of the testing data. We will use metrics such as mean squared error (MSE) and
coefficient of determination (RÂ²) to evaluate the model's performance

### Prediction
"""

y_pred = gpa_model.predict(X_test)
difference = y_test - y_pred
dif = round(difference, 2)
result_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred, 'Difference': dif})
result_df.head()

"""### Mean Square Error"""

print('Mean squared error: %.2f' % mean_squared_error(y_test, y_pred))

"""### Co-efficient of determination"""

print('Coefficient of determination: %.2f' % r2_score(y_test, y_pred))

"""## Step 6: Making Predictions
Once we have trained and evaluated our model, we can use it to predict GPAs for new students. We will provide the model with the student's grades and it will predict their GPA.
"""

new_student = [[4.2, 5.63, 6.55, 5.66]]
new_gpa = gpa_model.predict(new_student)
print('Predicted GPA: %.2f' % new_gpa)